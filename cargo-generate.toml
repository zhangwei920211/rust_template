[template]
cargo_generate_version = ">=0.18.0"

# 排除的文件和目录（不会被复制到生成的项目中）
exclude = [
    "cliff.toml",
    "_typos.toml",
    "_typos_typos.toml",
    "CHANGELOG.md",
    "target/",
    ".git/",
    "*.orig",
    "*.bak",
]

# # 模板占位符配置（移除保留字段）
# # 注意: project-name, authors, crate_name, crate_type, os-arch 是保留字段

# [placeholders.description]
# type = "string"
# prompt = "Describe your project"
# default = "A Rust project"

# [placeholders.gh_username]
# type = "string"
# prompt = "What is your GitHub username?"
# regex = "^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$"

# [placeholders.license]
# type = "string"
# prompt = "Choose a license"
# choices = [
#     "MIT",
#     "Apache-2.0",
#     "MIT OR Apache-2.0",
#     "GPL-3.0",
#     "BSD-3-Clause",
#     "Unlicense",
# ]
# default = "MIT OR Apache-2.0"

# [placeholders.rust_version]
# type = "string"
# prompt = "Minimum supported Rust version (MSRV)"
# default = "1.75.0"
# regex = "^1\\.[0-9]+\\.[0-9]+$"

# [placeholders.with_async]
# type = "bool"
# prompt = "Include async/await support with tokio?"
# default = false

# [placeholders.with_cli]
# type = "bool"
# prompt = "Include CLI support with clap?"
# default = false

# [placeholders.with_serde]
# type = "bool"
# prompt = "Include serialization support with serde?"
# default = false

# [placeholders.with_logging]
# type = "bool"
# prompt = "Include logging support with tracing?"
# default = false

# [placeholders.with_github_actions]
# type = "bool"
# prompt = "Include GitHub Actions CI/CD?"
# default = true

# [placeholders.with_pre_commit]
# type = "bool"
# prompt = "Include pre-commit hooks?"
# default = true

# [placeholders.with_docs]
# type = "bool"
# prompt = "Include documentation setup?"
# default = true

# [placeholders.with_examples]
# type = "bool"
# prompt = "Include example files?"
# default = true

# [placeholders.binary_type]
# type = "string"
# prompt = "Project type"
# choices = ["bin", "lib", "both"]
# default = "bin"

# # 条件文件包含/排除
# [conditional.'with_github_actions == false']
# ignore = [".github/", "deny.toml"]

# [conditional.'with_pre_commit == false']
# ignore = [".pre-commit-config.yaml"]

# [conditional.'with_docs == false']
# ignore = ["docs/", ".github/workflows/docs.yml"]

# [conditional.'with_examples == false']
# ignore = ["examples/"]

# [conditional.'binary_type == "lib"']
# ignore = ["src/main.rs", "examples/"]

# [conditional.'binary_type == "bin"']
# ignore = ["src/lib.rs"]

# # 文件重命名规则
# [template.rename]
# "gitignore" = ".gitignore"
# "github" = ".github"

# # 钩子脚本
# [hooks]
# # Use explicit script files so cargo-generate runs platform-appropriate hooks.
# # We provide both POSIX shell and PowerShell implementations; cargo-generate will
# # execute the entries it can on the current platform. Keeping both ensures
# # Windows (PowerShell) and Unix-like systems work correctly.
# pre = ["hooks/pre.sh", "hooks/pre.ps1"]

# post = ["hooks/post.sh", "hooks/post.ps1"]

# # GitHub Actions 文件处理
# # 将有冲突的 workflow 文件添加到 exclude 列表中，避免占位符替换问题
